import httpx
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from core.db import get_async_session
from utils.validators import is_valid_imei
from services.imei_service import check_imei_with_api
from core.config import settings
from sqlalchemy.future import select
from models.imei_models import WhitelistUser
from whitelist_table.add_to_whitelist import add_to_whitelist


async def check_whitelist(telegram_id: int, session):
    result = await session.execute(select(WhitelistUser).where(WhitelistUser.telegram_id == telegram_id))
    return result.scalar() is not None


ADMIN_ID = 506849721  # –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π Telegram ID


def create_bot():
    app = ApplicationBuilder().token(settings.BOT_TOKEN).build()

    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å IMEI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

    async def check_imei_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
        telegram_id = update.effective_user.id
        async for session in get_async_session():
            is_whitelisted = await check_whitelist(telegram_id, session)

        if not is_whitelisted:
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í–∞—Å –Ω–µ—Ç –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ.")
            return

        imei = update.message.text.strip()
        if not is_valid_imei(imei):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IMEI. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        try:
            api_response = await check_imei_with_api(imei)
            props = api_response.get("properties", {})
            device_name = props.get("deviceName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            imei2 = props.get("imei2", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            serial = props.get("serial", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            region = props.get("apple/region", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            purchase_date = props.get("estPurchaseDate", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            lost_mode = "‚úÖ –ù–µ—Ç" if not props.get("lostMode", False) else "‚ùå –î–∞"
            refurbished = "‚úÖ –ù–µ—Ç" if not props.get("refurbished", False) else "‚ùå –î–∞"

            response_text = (
                f"üì± **–î–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞**:\n"
                f"üîπ **–ú–æ–¥–µ–ª—å:** {device_name}\n"
                f"üîπ **IMEI:** {imei}\n"
                f"üîπ **IMEI2:** {imei2}\n"
                f"üîπ **–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä:** {serial}\n"
                f"üåç **–†–µ–≥–∏–æ–Ω:** {region}\n"
                f"üìÖ **–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏:** {purchase_date}\n"
                f"üîÑ **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π:** {refurbished}\n"
                f"üîç **–†–µ–∂–∏–º —É—Ç–µ—Ä–∏:** {lost_mode}\n"
            )
            await update.message.reply_text(response_text, parse_mode="Markdown")
        except httpx.HTTPError:
            await update.message.reply_text("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ IMEI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def add_whitelist(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id != ADMIN_ID:
            await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ whitelist.")
            return

        if not context.args:
            await update.message.reply_text("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/add_whitelist <TELEGRAM_ID> <–ò–º—è>`", parse_mode="Markdown")
            return

        try:
            telegram_id = int(context.args[0])
            name = " ".join(context.args[1:]) if len(context.args) > 1 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

            async for session in get_async_session():
                added = await add_to_whitelist(telegram_id, name, session)

            if added:
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{telegram_id}` –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist.")
            else:
                await update.message.reply_text(f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{telegram_id}` —É–∂–µ –≤ whitelist.")

        except ValueError:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add_whitelist", add_whitelist))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_imei_bot))

    return app
